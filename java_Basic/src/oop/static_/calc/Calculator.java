package oop.static_.calc;

public class Calculator {
	
	/*
    - 계산기마다 색깔이 각각 다를 수 있기 때문에 color같은 변수는
     데이터를 공유시키지 말고, 객체별로 따로 관리해야 합니다.
     
    - 반면에 pi같은 원주율값은 계산기마다 값이 동일해야 하기 때문에
     static을 붙여서 데이터를 공유하게 하는 것이 유리합니다.
    */
	
	String color;
	static double pi = 3.141592;
	
//	계산기마다 color를 각각 다르게 지정하고 싶다면 static은 어룰리지 않는다.
//	하지만 pi 라는 원주율 값은 모든 계산기가 공유해도 괜찮은 값이며,
//	혹시라도 원주율의 값이 변하게 된다고 하더라도 일일히 객체마다 바꿔줄 필요 없이
//	공유되는 값 하나만 바꿔주면 될 것이다.
	
	public void paint(String name) {
		
		/*
	     - 메서드 내부에서 non-static 데이터를 참조하고 있는 메서드는
	      해당 변수의 정확한 위치(객체의 주소값)을 알려줘야 하기 때문에
	      정적 메서드로 선언하기가 부적합합니다.
	     */
		
		System.out.println("계산기에 " + color + "색을 칠합니다.");
		this.color = color;
		
	}
	
//	메시드 또한 마찬가지이다.
//	메서드 내부에서 non-static 데이터를 참조하고 있는 메서드는 
//	해당 변수의 정확한 위치(객체의 주소값)을 알려줘야 하기 때문에
//	정작 메서드로 선언하기가 부적합 하다.
//	그러나 메서드 내부에서 인스턴스 변수를 사용하지 않고 범용성 있게 사용하는 메서드는
//	static 키워드를 붙여서 정적 메서드로 선언하는 것이 여러모로 좋을 것이다.

//	결론은 static 을 붙여야 하느냐 말아야 하느냐에 정답은 없다.
//	해당 필드 및 메서드의 사용목적에 따라 붙이는게 유리한 상황이 있는 것이다.
	
	/*
    - 메서드 내부에서 인스턴스 변수를 사용하지 않고 범용성 있게 사용하는
     메서드는 static 키워드를 붙여서 정적 메서드로 선언하는 것이
     좋습니다.
    */
	
	public static double calcAreaCircle(int r) {
		return r * r * pi;
	}

}
